plan telemetry_collection::ssh_hostkey_config (
  TargetSpec $targets
) {

  $all_targets = get_targets($targets)

  # Determine the current SSH configuration for each target (if any)
  $current_ssh_config_result = run_command('cat ${::home}/.ssh/config || echo "NOT_FOUND"', $all_targets)

  $ssh_config_content = @("SSHCONFIG"/L)
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
| SSHCONFIG |

  $all_targets.each |$var_node| {
    $current_ssh_config = $current_ssh_config_result.find($var_node.name).value['stdout'].strip

    # Only apply the new configuration if it doesn't match the current configuration
    if $current_ssh_config != $ssh_config_content {
      apply($var_node) {
        # Ensure .ssh directory exists
        file { "${::home}/.ssh":
          ensure  => directory,
          owner   => $::user,
          group   => $::group,
          mode    => '0700',
        }

        # SSH config file
        file { "${::home}/.ssh/config":
          ensure  => file,
          owner   => $::user,
          group   => $::group,
          mode    => '0600',
          content => $ssh_config_content,
        }
      }
    }

    # Notify user of the changes (or lack thereof)
    if $current_ssh_config == $ssh_config_content {
      out::message("SSH Configuration for ${var_node.name} already matches desired state.")
    } else {
      out::message("SSH Configuration for ${var_node.name} has been updated.")
    }
  }
}
